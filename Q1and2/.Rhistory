student<-read.csv('Q1a.csv',header=TRUE)
head(student)
```
QUESTION 1
a. Extract each dept students names separately
```{r}
aggregate(Name~Dept.Name,data=student,toString)
aggregate(Name~Dept.Name,data=student)
aggregate(Name~Dept.Name,data=student,toString)
s<-student[student$Sub1=="S"|student$Sub2=="S"|student$Sub3=="S"|student$Sub4=="S"|student$Sub5=="S",c("Name","Dept.Name")]
aggregate(Name~Dept.Name,data=s,toString)
s<-student[student$Sub1=="S"|student$Sub2=="S"|student$Sub3=="S"|student$Sub4=="S"|student$Sub5=="S",c("Name","Dept.Name")]
s
aggregate(Dept.Name~Name,data=student,toString)
aggregate(Name~Dept.Name,data=student,toString)
aggregate(Dept.Name~Name,data=student,toString)
s
aggregate(Name~Dept.Name,data=s,toString)
student[rowSums(student=="S")>1,c("Name","Dept.Name")]
r <- raster(ncols=2, nrows=5)
values(r) <- 1:10
as.matrix(r)
rowSums(r)
colSums(r)
install.packages(raster)
install.packages('raster')
r <- raster(ncols=2, nrows=5)
values(r) <- 1:10
as.matrix(r)
rowSums(r)
colSums(r)
prof=faculty[faculty$Designation=="Professor",]
```{r}
faculty<-read.csv('Q1b.csv',header=TRUE)
head(faculty)
prof=faculty[faculty$Designation=="Professor",]
prof
prof=faculty[faculty$Designation=="Professor"]
prof
prof=faculty[faculty$Designation=="Professor"]
prof=faculty[faculty$Designation=="Professor",]
aggregate(Salary~Dept,prof,toString)
aggregate(Salary~Dept,prof,sum)
avg_sal<-aggregate(Salary~Dept,faculty,mean)
avg_sal[which.max(avg_sal$Salary),]
student<-read.csv('Q2a.csv',header=TRUE)
head(student)
student[student,'Name']
student[student,'Names']
student<-read.csv('Q2a.csv',header=TRUE)
head(student)
student[student,'Names']
student[student$Names]
student[student,student$Names]
student[,student$Names]
student[student$Names,c('Names','dept')]
student[student$Names,c('Names','Dept')]
student[student$Names,c('Names')]
student[,'Names']
install.packages("RCurl")
library(RCurl)
url<-'https://shrib.com/da2'
x<-getURL(url)
x
url<-'https://shrib.com/#da2'
x
x<-getURL(url)
x
download.file(url,destfile = 'q2.html',method = 'libcurl')
download.file(url,destfile = 'q2.txt',method = 'libcurl')
download.file('data:text/plain;charset=utf-8,%0A%60%60%60%7Br%7D%0Astudent%3C-read.csv('Q2a.csv'%2Cheader%3DTRUE)%0Ahead(student)%0A%60%60%60%0A%0Ai.%20Store%20students%20marks%20numerically%2C%20transform%20into%20grades%20and%20store%20in%20new%20dataframe%0A%60%60%60%7Br%7D%0A%0AcalculateGrade%20%3C-%20function(mark)%20%0A%7B%0A%20%20m%3C-c()%0A%20%20for(x%20in%20mark)%0A%20%20%7B%0A%20%20if(x%20%3E%3D%2080)%20%7B%0A%20%20%20%20res%20%3C-%20%22A%22%0A%20%20%7D%20else%20if(x%20%3E%3D%2060%20%26%20x%3C80)%20%7B%0A%20%20%20%20res%20%3C-%20%22B%22%0A%20%20%7D%20else%20if(x%20%3E%3D%2040%20%26%20x%3C60)%20%7B%0A%20%20%20%20res%20%3C-%20%22C%22%0A%20%20%7D%20else%20%7B%0A%20%20%20%20res%20%3C-%20%22D%22%0A%20%20%7D%0A%20%20m%3C-c(m%2Cres)%0A%20%20%7D%0A%20%20m%0A%7D%0A%0Afor(i%20in%201%3Anrow(student))%0A%7B%0A%20s1%3C-student%5B%2C%22Sub1%22%5D%0A%20s2%3C-student%5B%2C%22Sub2%22%5D%0A%20s3%3C-student%5B%2C%22Sub3%22%5D%0A%20s4%3C-student%5B%2C%22Sub4%22%5D%0A%20s5%3C-student%5B%2C%22Sub5%22%5D%0A%20g1%3DcalculateGrade(s1)%0A%20g2%3DcalculateGrade(s2)%0A%20g3%3DcalculateGrade(s3)%0A%20g4%3DcalculateGrade(s4)%0A%20g5%3DcalculateGrade(s5)%0A%7D%0Aans%3C-data.frame(student%24Names%2Cstudent%24USN%2Cstudent%24Dept%2Cg1%2Cg2%2Cg3%2Cg4%2Cg5)%0Aans%0A%0A%60%60%60%0A%0Aii.%20Check%20whether%20students%20grades%20are%20identical%20or%20not%20in%20each%20subject%0A%60%60%60%7Br%7D%0Aidentical(ans%24g1%2Cans%24g2)%0A%60%60%60%0A%0AExtract%20students'%20marks%20in%20each%20subject%20separately.%20If%20the%20student%20has%20scored%20greater%20than%2080%20map%20it%20as%20%22good%22%2C%20if%20it%20is%20between%20(80%20and%2060)%20map%20it%20as%20%22moderate%22%2C%20if%20it%20is%20between%20(40%20and%2060)%20map%20it%20as%20%22need%20improvement%22%2C%20else%20map%20it%20as%20%22poor%22.%0A%60%60%60%7Br%7D%0AassignComment%20%3C-%20function(mark)%20%0A%7B%0A%20%20x%3C-sum(mark)%2F5%0A%20%20%0A%20%20if(x%20%3E%3D%2080)%20%7B%0A%20%20%20%20res%20%3C-%20%22Good%22%0A%20%20%7D%20else%20if(x%20%3E%3D%2060%20%26%20x%3C80)%20%7B%0A%20%20%20%20res%20%3C-%20%22Moderate%22%0A%20%20%7D%20else%20if(x%20%3E%3D%2040%20%26%20x%3C60)%20%7B%0A%20%20%20%20res%20%3C-%20%22Need%20Improvement%22%0A%20%20%7D%20else%20%7B%0A%20%20%20%20res%20%3C-%20%22Poor%22%0A%20%20%7D%0A%20%20res%0A%7D%0Afor(i%20in%201%3Anrow(student))%0A%7B%0A%20s1%3C-student%5Bi%2C%22Sub1%22%5D%0A%20s2%3C-student%5Bi%2C%22Sub2%22%5D%0A%20s3%3C-student%5Bi%2C%22Sub3%22%5D%0A%20s4%3C-student%5Bi%2C%22Sub4%22%5D%0A%20s5%3C-student%5Bi%2C%22Sub5%22%5D%0A%20%0A%20mark%3C-c(s1%2Cs2%2Cs3%2Cs4%2Cs5)%0A%20ans%3C-assignComment(mark)%0A%20student%5Bi%2C%22Comment%22%5D%3C-ans%0A%20%7D%0A%20%0Astudent%0A%60%60%60%0A%0AConsider%20dataset%20given%20in%20(1.a)%20%2C%20map%20the%20S%2CA%2C%20grades%20as%20%22%20GOOD%22%3B%20map%20%2CB%2CC%20grades%0Aas%20%22average%22%2C%20D%2CE%20grades%20as%20%22below%20average%22%3B%20'F'%20grade%20as%20%22poor%22.%0A%60%60%60%7Br%7D%0AcalculateGrade%20%3C-%20function(x)%20%7B%0A%20%20if(x%20%3D%3D%20'S'%20%7C%20x%20%3D%3D%20'A')%20%7B%0A%20%20%20%20res%20%3C-%20%22Good%22%0A%20%20%7D%20else%20if(x%20%3D%3D%20'B'%20%7C%20x%20%3D%3D%20'C')%20%7B%0A%20%20%20%20res%20%3C-%20%22Average%22%0A%20%20%7D%20else%20if(x%20%3D%3D%20'D'%20%7C%20x%20%3D%3D%20'E')%20%7B%0A%20%20%20%20res%20%3C-%20%22Below%20Average%22%0A%20%20%7D%20else%20%7B%0A%20%20%20%20res%20%3C-%20%22Poor%22%0A%20%20%7D%0A%20%20res%0A%7D%0Afor(i%20in%201%3Anrow(student))%0A%7B%0A%20g%3C-student%5Bi%2C%22Grade%22%5D%0A%20%0A%0A%20ans%3C-calculateGrade(g)%0Astudent%5Bi%2C%22Grade_Comment%22%5D%3C-ans%0A%20%7D%0A%20%0Astudent%0A%0A%0A%60%60%60%0A%0ATransform%20dept%20names%20to%20numerical%20data.%0A%60%60%60%7Br%7D%0Astud1%3C-transform(student%2CDept%3Das.numeric(Dept))%0Astud1%0A%0A%60%60%60%0A%0AUsing%20factor()%20and%20mapvalues()%20convert%20dept%20names%20to%20numerical%20data.%0A%60%60%60%7Br%7D%0A%0Astud2%3C-transform(student%2CDept%3Das.factor(mapvalues(Dept%2Cc(%22CSE%22%2C%22ISE%22)%2Cc(1%2C2))))%0Astud2%0A%60%60%60%0A%0ACreate%20table%20from%20student%20data%20with%20USN%20and%20names%20only.%0A%60%60%60%7Br%7D%0A%0Atable(student%24Names%2Cstudent%24USN)%0A%60%60%60%0A%0ADisplay%20the%20typeof%20each%20column.%0A%60%60%60%7Br%7D%0Asapply(student%2Ctypeof)%0A%0A%60%60%60%0A%0AWrite%20separate%20functions%20to%20perform%20all%20the%20above%20functions%20separately%20and%20call%20them%20in%20R%20script.%0A%0AWrite%20a%20function%20to%20perform%20statistical%20analysis%20of%20students%20data.%0A%60%60%60%7Br%7D%0ASummary_sub%20%3C-%20function(x)%20%7B%0A%20%20ans%3C-c(mean%3Dmean(x)%2C%20median%3Dmedian(x)%2C%20sd%3Dsd(x))%0A%20%20ans%0A%7D%0A%0Asub2%3C-student%24Sub2%0Aans%3C-Summary_sub(sub2)%0Aans%0A%0A%0A%0A%60%60%60%0A%0AUse%20sapply%20to%20perform%201.c%2C%201d%0A%60%60%60%7Br%7D%0AcalculateResult%20%3C-%20function(x)%20%7B%0A%20%20if(x%20%3E%3D%2080)%20%7B%0A%20%20%20%20res%20%3C-%20%22Good%22%0A%20%20%7D%20else%20if(x%20%3E%3D%2060%20%26%20x%3C80)%20%7B%0A%20%20%20%20res%20%3C-%20%22Moderate%22%0A%20%20%7D%20else%20if(x%20%3E%3D%2040%20%26%20x%3C60)%20%7B%0A%20%20%20%20res%20%3C-%20%22Need%20Improvement%22%0A%20%20%7D%20else%20%7B%0A%20%20%20%20res%20%3C-%20%22Poor%22%0A%20%20%7D%0A%20%20res%0A%7D%0A%0Asub1%3Dstudent%24Sub1%0Asub1%0Aans%3C-sapply(sub1%2CFUN%3DcalculateResult)%0Ad%3C-data.frame(student%24Names%2Cans)%0Ad%0A%60%60%60%0A%0A%0A',destfile = 'q2.txt',method = 'libcurl')
url<-'http://wikisend.com/download/374094/Q2a.rmd'
download.file(url,destfile = 'q2.txt',method = 'libcurl')
student<-read.csv('Q2a.csv',header=TRUE)
head(student)
student[,'Names']
```
i. Store students marks numerically, transform into grades and store in new dataframe
```{r}
calculateGrade <- function(mark)
{
m<-c()
for(x in mark)
{
if(x >= 80) {
res <- "A"
} else if(x >= 60 & x<80) {
res <- "B"
} else if(x >= 40 & x<60) {
res <- "C"
} else {
res <- "D"
}
m<-c(m,res)
}
m
}
for(i in 1:nrow(student))
{
s1<-student[,"Sub1"]
s2<-student[,"Sub2"]
s3<-student[,"Sub3"]
s4<-student[,"Sub4"]
s5<-student[,"Sub5"]
g1=calculateGrade(s1)
g2=calculateGrade(s2)
g3=calculateGrade(s3)
g4=calculateGrade(s4)
g5=calculateGrade(s5)
}
ans<-data.frame(student$Names,student$USN,student$Dept,g1,g2,g3,g4,g5)
ans
s1<-student[,"Sub1"]
s2<-student[,"Sub2"]
s3<-student[,"Sub3"]
s4<-student[,"Sub4"]
s5<-student[,"Sub5"]
g1=calculateGrade(s1)
g2=calculateGrade(s2)
g3=calculateGrade(s3)
g4=calculateGrade(s4)
g5=calculateGrade(s5)
#}
ans<-data.frame(student$Names,student$USN,student$Dept,g1,g2,g3,g4,g5)
ans
s1<-student[,"Sub1"]
s1
```{r}
identical(ans$g1,ans$g2)
identical(ans$g1,ans$g2,ans$g3,ans$g4,ans$g5)
for(i in 1:nrow(student))
{
a=student[i,]
identical(a$g1,a$g2,a$g3,a$g4,a$g5)
}
for(i in 1:nrow(student))
{
a<-student[i,]
identical(a$g1,a$g2,a$g3,a$g4,a$g5)
}
for(i in 1:nrow(student))
{
a<-student[i,]
a
identical(a$g1,a$g2,a$g3,a$g4,a$g5)
}
```{r}
for(i in 1:nrow(student))
{
a<-student[i,]
a
#identical(a$g1,a$g2,a$g3,a$g4,a$g5)
}
a<-student[1,]
a
for(i in 1:nrow(student))
{
a<-ans[i,]
a
#identical(a$g1,a$g2,a$g3,a$g4,a$g5)
}
for(i in 1:nrow(student))
{
a<-ans[i,]
a
identical(a$g1,a$g2,a$g3,a$g4,a$g5)
}
for(i in 1:nrow(student))
{
a<-ans[i,]
print(a)
identical(a$g1,a$g2,a$g3,a$g4,a$g5)
}
for(i in 1:nrow(student))
{
a<-ans[i,]
identical(a$g1,a$g2,a$g3,a$g4,a$g5)
}
a<-student[1,]
a
identical(a$g1,a$g2,a$g3,a$g4,a$g5)
a<-ans[1,]
a
identical(a$g1,a$g2,a$g3,a$g4,a$g5)
